@model AccountProfileViewModel
@{ 
    var passwordTitle = Model.HasLocalAccount ? "Change Password" : "Set Password";
    var checkUsernameUrl = Utility.CombineUrl(AppEnvironment.Default.Server.Url, "/api/accounts/username-check");
    var apiPasswordUrl = Utility.CombineUrl(AppEnvironment.Default.Server.Url, "/api/accounts/pwd");
    var apiUserBackdropUrl = Utility.CombineUrl(AppEnvironment.Default.Server.Url, "/api/users", Model.User.Id, "backdrop");
}

<header class="bg-transparent page-heading page-heading-lg text-center text-white"
        style="background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.0)), url(@Model.User.GetUserBackdropUrl()) no-repeat; -webkit-background-size: cover; -moz-background-size: cover; -o-background-size: cover; background-size: cover; ">
    <h1>@Model.User.Username</h1>
    <p class="font-smaller text-white">
        <a href="#" class="text-white">Change backdrop</a>
    </p>
    <p class="pull-right">
        <button class="btn btn-sm btn-success" onclick="$('#profile-form').submit()">
            <i class="fa fa-cloud"></i>
            Save Changes
        </button>
    </p>
</header>
<form class="page-content page-content-article" 
        id="profile-form" action="@Model.ApiSaveProfileUrl" method="put"
        data-callback="GrafikaApp.toast('Succesfully saved')"
        onsubmit="return GrafikaApp.Form.onSubmit(this)">
    <article class="row">
        <header>
            <h2>Profile</h2>
        </header>
        <div class="form-horizontal">
            <div class="form-group">
                <label class="control-label col-sm-2">&nbsp;</label>
                <div class="col-sm-8">
                    <a href="javascript: void(0)" data-dialog 
                       data-title="Avatar" 
                       data-url="/uploads/image" 
                       data-eval-data="false" 
                       data-method="get"
                       data-data='{"uploadFunction" : "GrafikaApp.Account.uploadAvatar"}'>
                        <img class="border" height="100" width="100" src="@Model.User.GetUserAvatarUrl()" />
                    </a>
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2">Email</label>
                <div class="col-sm-8">
                    @Html.EditorFor(m => m.Email, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2">Password</label>
                <div class="col-sm-8">
                    <button type="button" class="btn btn-danger"
                        data-dialog
                        data-title="@passwordTitle"
                        data-url="/accounts/forms/password?RequiresCurrentPassword=@Model.Local?.IsRegistered&ApiPasswordUrl=@apiPasswordUrl"
                        data-size="medium">@passwordTitle</button>
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2">Name</label>
                <div class="col-sm-8">
                    <span class="col-sm-2 no-padding">
                        @Html.EditorFor(m => m.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                    </span>
                    <span class="col-sm-8">
                        @Html.EditorFor(m => m.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    </span>
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2">Username</label>
                <div class="col-sm-6">
                    <span class="col-sm-10 no-padding">
                        @Html.EditorFor(m => m.Username, new { htmlAttributes = new { @class = "form-control" } })
                    </span>
                    <span class="col-sm-2">
                        <button type="button" class="btn btn-default"
                                data-callback="GrafikaApp.toast('Username is available')"
                                data-data="(function() { return {email: '@Model.Email', username: $('#Username').val() } })"
                                data-url="@checkUsernameUrl"
                                data-method="post"
                                onclick="GrafikaApp.sendAjax(this)">
                            Check
                            </button>
                    </span>
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2">Accounts</label>
                <div class="bgn-group col-sm-6" data-toggle="buttons">
                    @{
                        var googleAccount = Model?.Google?.Id != null ? "checked" : "";
                        var fbAccount = Model?.Facebook?.Id != null ? "checked" : "";
                    }
                    <label class="btn btn-danger active">
                        <input type="checkbox" autocomplete="off" @googleAccount> Google
                    </label>
                    <label class="btn btn-primary active">
                        <input type="checkbox" autocomplete="off" @fbAccount> Facebook
                    </label>
                </div>
            </div>
        </div>
    </article>

    <article class="row">
        <header>
            <h2>Settings</h2>
        </header>
        <div class="form-horizontal">
            <div class="form-group">
                <label class="control-label col-sm-2">Default Animation</label>
                <div class="col-sm-8">
                    <select id="@Html.IdFor(m => m.Prefs.DrawingIsPublic)" name="@Html.NameFor(m => m.Prefs.DrawingIsPublic)" class="form-control">
                        <option value="true" @(Model.Prefs.DrawingIsPublic == true ? "selected" : "")>Public</option>
                        <option value="false" @(Model.Prefs.DrawingIsPublic == true ? "" : "selected")>Private</option>
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2">Default Author</label>
                <div class="col-sm-8">
                    @Html.EditorFor(m => m.Prefs.DrawingAuthor, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2">Default Timer</label>
                <div class="col-sm-8">
                    @Html.EditorFor(m => m.Prefs.DrawingTimer, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2">Playback</label>
                <div class="col-sm-8">
                    <select id="@Html.IdFor(m => m.Prefs.PlaybackLoop)" name="@Html.NameFor(m => m.Prefs.PlaybackLoop)" class="form-control">
                        <option value="true" @(Model.Prefs.PlaybackLoop == true ? "selected" : "")>Always loop</option>
                        <option value="false" @(Model.Prefs.PlaybackLoop == true ? "" : "selected")>Don't loop</option>
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2">&nbsp;</label>
                <div class="col-sm-8">
                    <label>
                        <input name="@Html.NameFor(m => m.Subscriptions.EmailOnComments)" type="checkbox" autocomplete="off"
                                @(Model.Subscriptions?.EmailOnComments == true ? "checked" : "")>
                        Notify me on new comments
                    </label>
                </div>
            </div>
        </div>
    </article>
</form>

@section scripts {
<environment names="Development">
    <script type="text/javascript" src="~/js/GrafikaApp.Account.js"></script>
</environment>
<environment names="Production">
    <script type="text/javascript" src="~/js/GrafikaApp.Bundle.Account.min.js"></script>
</environment>
}
@section styles {
<environment names="Development">
</environment>
<environment names="Production">
</environment>
}